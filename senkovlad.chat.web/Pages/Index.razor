@page "/"
@using senkovlad.chat.shared;
@using System.Threading;
@using System.IO;
@inject ChatRoom.ChatRoomClient chatRoomClient
@implements IDisposable

<div style="height: 80vh; width: 50vw;">
    <div style="display: grid; grid-template-rows:auto 1fr auto; height: 100%">
        <h1 style="align-self: start; grid-row: 1">Messages: </h1>
        <div style="overflow-y: auto; grid-row: 2;align-self: end; max-height: 100%">
            <MessagesComponent Messages=@messages />
        </div>
        <div style="grid-row: 3">
            <Radzen.Blazor.RadzenTextArea 
                                          Placeholder="Input your message" 
                                          Style="margin-top: 20px; width: 100%"
                                          @bind-Value="inputMessage"/>
            <Radzen.Blazor.RadzenButton Click="SendMesageAsync">Send</Radzen.Blazor.RadzenButton>
        </div>
    </div>
</div>

@code {
    private List<string> messages = new List<string>();
    private CancellationTokenSource CancellationTokenSource = new CancellationTokenSource();
    private string inputMessage;

    protected override async Task OnInitializedAsync()
    {

        using (var stream = chatRoomClient.JoinChat(new ChatMessageRequest(), cancellationToken: CancellationTokenSource.Token))
        {
            while(await stream.ResponseStream.MoveNext(CancellationTokenSource.Token))
            {
                messages.Add(stream.ResponseStream.Current.Message);
                this.StateHasChanged();
            }
        }
    }

    void IDisposable.Dispose()
    {
        CancellationTokenSource.Cancel();
    }
    private async void SendMesageAsync()
    {
        var response = await chatRoomClient.SendMessageAsync(new ChatMessageRequest
        {
            MessageText = inputMessage
        });
        
        if(!string.IsNullOrWhiteSpace(response.Message))
        {
            inputMessage = "";
        }
    }
}
