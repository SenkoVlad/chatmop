@page "/"
@using senkovlad.chat.shared;
@using System.Threading;

@inject ChatRoom.ChatRoomClient chatRoomClient
@implements IDisposable


<div style="height: 80vh; width: 50vw;">
    <Grid RowsDefenition="1fr auto">
        <GridChild Row="1" style="align-self: start">
            <h1>Messages: </h1>
        </GridChild>

        <GridChild Row="2" style="overflow-y: auto; max-height: 100%; align-self: end;">
            <MessagesComponent Messages=@messages />
        </GridChild>

        <GridChild Row="3">
            <Radzen.Blazor.RadzenTextArea Placeholder="Input your message"
                                          Style="margin-top: 20px; width: 100%"
                                          @bind-Value="inputMessage" />
            <Radzen.Blazor.RadzenButton Click="SendMesageAsync">Send</Radzen.Blazor.RadzenButton>
        </GridChild>

    </Grid>
</div>

@code {
    private List<string> messages = new List<string>();
    private CancellationTokenSource CancellationTokenSource = new CancellationTokenSource();
    private string inputMessage;

    protected override async Task OnInitializedAsync()
    {

        using (var stream = chatRoomClient.JoinChat(new ChatMessageRequest(), cancellationToken: CancellationTokenSource.Token))
        {
            while (await stream.ResponseStream.MoveNext(CancellationTokenSource.Token))
            {
                messages.Add(stream.ResponseStream.Current.Message);
                this.StateHasChanged();
            }
        }
    }

    void IDisposable.Dispose()
    {
        CancellationTokenSource.Cancel();
    }
    private async void SendMesageAsync()
    {
        var response = await chatRoomClient.SendMessageAsync(new ChatMessageRequest
        {
            MessageText = inputMessage
        });

        if (!string.IsNullOrWhiteSpace(response.Message))
        {
            inputMessage = "";
            this.StateHasChanged();
        }
    }
}
